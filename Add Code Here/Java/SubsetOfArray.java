import java.util.*;

public class SubsetOfArray {// NOte - in string subset question we don't need backtracking because string
                            // cannot be change , because strings are immutable....
    public static ArrayList<ArrayList<Integer>> Sub(int[] arr) {// iterative approach..............
        ArrayList<ArrayList<Integer>> real = new ArrayList<>();
        real.add(new ArrayList<>());
        for (int elem : arr) {
            ArrayList<ArrayList<Integer>> a = new ArrayList<>();// we can't make copy of real with this a 'cause it will
                                                                // cause the same reference........
            for (ArrayList<Integer> e : real) {
                ArrayList<Integer> newlist = new ArrayList<>(e);// to create a copy.........
                newlist.add(elem);// adding the element in the current newlist......
                a.add(newlist);// adding the newlist in the a listoflist....
            }
            real.addAll(a);// combining real and a listoflist...........
        }
        return real;
    }

    public static ArrayList<ArrayList<Integer>> Subset(int[] arr, int idx, ArrayList<Integer> ans) {// backtracking
                                                                                                    // approach.........
        if (idx == arr.length) {
            ArrayList<ArrayList<Integer>> ds = new ArrayList<>();// making new listoflist.....
            ArrayList<Integer> real = new ArrayList<>(ans);// making new arraylist for copy of ans...
            ds.add(real);// adding current real arraylist in ds....and returning........
            return ds;
        }
        ArrayList<ArrayList<Integer>> a = Subset(arr, idx + 1, ans);// if idx at 0 doesn't choose to come...
        ans.add(arr[idx]);
        ArrayList<ArrayList<Integer>> b = Subset(arr, idx + 1, ans);// if choose to come.......
        ans.remove(ans.size() - 1);// backtracking..........................
        a.addAll(b);
        return a;
    }

    public static void main(String[] args) {
        int[] arr = { 1, 2, 3 };
        System.out.println("this is iterative approach " + Sub(arr));
        System.out.println("this is backtracking approach " + Subset(arr, 0, new ArrayList<>()));
    }
}
