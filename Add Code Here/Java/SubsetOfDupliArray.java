import java.util.*;

public class SubsetOfDupliArray {// can also use hashset but that takes much time and space time
                                 // complexity.......
    public static ArrayList<ArrayList<Integer>> Sub(int[] arr) {// iterative approach..............
        ArrayList<ArrayList<Integer>> real = new ArrayList<>();// for duplicates i will create
                                                               // hashset.......................
        real.add(new ArrayList<>());
        for (int i = 0; i < arr.length; i++) {
            int start = 0;// for normal cases start will start from 0....................
            if (i > 0 && arr[i] == arr[i - 1])// if duplicate found then start from 2.....to prevent the
                                              // dulication..........
                start = 2;
            ArrayList<ArrayList<Integer>> a = new ArrayList<>();// we can't make copy of real with this a 'cause it will
                                                                // cause the same reference........
            for (int j = start; j < real.size(); j++) {// starting j from 'start'.................
                ArrayList<Integer> newlist = new ArrayList<>(real.get(j));// to create a copy.........
                newlist.add(arr[i]);// adding the element in the current newlist......
                a.add(newlist);// adding the newlist in the a listoflist....
            }
            real.addAll(a);// combining real and a listoflist...........

        }
        return real;
    }

    public static void main(String[] args) {
        int[] arr = { 1, 2, 2 };// duplicate elements................
        System.out.println("this is iterative approach " + Sub(arr));
    }
}
